apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'jacoco-android'
apply plugin: "androidx.navigation.safeargs"

android {
    compileSdkVersion 30
    buildToolsVersion '30.0.3'

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        applicationId "com.nepumuk.notizen"
        minSdkVersion 23
        targetSdkVersion 30
        // check version code from system environment (if input from CI-System)
        if ("$System.env.VERSIONCODE"=="null") {
            // not found, check local properties file in root dir of project
            Properties properties = new Properties()
            properties.load(project.rootProject.file('local.properties').newDataInputStream())
            // default values are also provided, if not in properties file...
            versionCode properties.getProperty('versionCode') as Integer?:1
            versionName properties.getProperty('versionName') as String?:"1.0"
        }else{
            versionCode "$System.env.VERSIONCODE" as Integer
            versionName "$System.env.VERSIONNAME" as String
        }
        vectorDrawables.useSupportLibrary = true
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            resValue "string", "app_name", "@string/app_name_base"
        }
        debug {
            applicationIdSuffix '.debug'
            resValue "string", "app_name", "@string/app_name_debug"
        }
    }
    testOptions {
        unitTests.includeAndroidResources = true
    }
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/JaCoCoReports")
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
    // copied from https://stackoverflow.com/a/36130467
    testLogging {
        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

jacocoAndroidUnitTestReport {
    csv.enabled false
    html.enabled false
    xml.enabled true
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])
    // kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    //
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'com.google.android.material:material:1.2.1'
    implementation 'com.google.firebase:firebase-appindexing:19.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.vectordrawable:vectordrawable:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.preference:preference-ktx:1.1.1'


    // navigation components
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    // Feature module Support
    implementation "androidx.navigation:navigation-dynamic-features-fragment:$nav_version"
    implementation 'androidx.navigation:navigation-fragment:2.3.2'
    implementation 'androidx.navigation:navigation-ui:2.3.2'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'
    // Testing Navigation
    androidTestImplementation "androidx.navigation:navigation-testing:$nav_version"
    // Jetpack Compose Integration
    implementation "androidx.navigation:navigation-compose:1.0.0-alpha04"


    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'


    /**test dependencies**/
    testImplementation 'junit:junit:4.12'
    testImplementation 'androidx.test:core:1.3.0'

    // AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation  'androidx.test.ext:junit:1.1.2'
    testImplementation  'androidx.test.ext:junit:1.1.2'


    testImplementation "org.robolectric:robolectric:4.5-alpha-1" // TODO move to release once released
    /**Power mock**/
    testImplementation "org.powermock:powermock-core:1.7.3"
    testImplementation "org.powermock:powermock-module-junit4:1.7.3"
    testImplementation "org.powermock:powermock-api-mockito2:1.7.3"
    // TODO figure out a better way to test fragments in release build
    implementation "androidx.fragment:fragment-testing:1.2.5"
}
repositories {
    mavenCentral()
}
